Step 1: Turn on the Google Calendar API

1. Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.
   이 마법사를 사용하여 Google Developers Console에서 프로젝트를 만들거나 선택하고 API를 자동으로 사용합니다. 계속을 클릭 한 다음 자격 증명으로 이동을 클릭하십시오.

2. On the Add credentials to your project page, click the Cancel button.
   프로젝트에 자격 증명 추가 페이지에서 취소 단추를 클릭하십시오.

3. At the top of the page, select the OAuth consent screen tab. Select an Email address, enter a Product name if not already set, and click the Save button.
   페이지 상단에서 OAuth 승인 화면 탭을 선택하십시오. 이메일 주소를 선택하고 아직 설정되지 않은 경우 제품 이름을 입력 한 다음 저장 버튼을 클릭하십시오.

4. Select the Credentials tab, click the Create credentials button and select OAuth client ID.
   자격증명 탭을 선택하고 자격증명 작성 버튼을 클릭 한 다음 OAuth 클라이언트 ID를 선택하십시오.

5. Select the application type Other, enter the name "Google Calendar API Quickstart", and click the Create button.
   애플리케이션 유형을 기타로 선택하고 "Google 캘린더 API 빠른 시작" 이름을 입력 한 다음 만들기 버튼을 클릭합니다.

6. Click OK to dismiss the resulting dialog.
   결과 대화 상자를 닫으려면 확인을 클릭하십시오.

7. Click the file_download (Download JSON) button to the right of the client ID.
   클라이언트 ID의 오른쪽에있는 file_download (JSON 다운로드) 버튼을 클릭하십시오.

8. Move this file to your working directory and rename it client_secret.json.
   이 파일을 작업 디렉토리로 이동하고 이름을 client_secret.json으로 변경하십시오.


Step 2: Install the Google Client Library
Run the following command to install the library using composer:
composer를 사용하여 라이브러리를 설치하려면 다음 명령을 실행하십시오.

  $ php composer.phar require google/apiclient:^2.0

See the library's installation page for the alternative installation options.
다른 설치 옵션에 대해서는 라이브러리의 설치 페이지를 참조하십시오.

Step 3: Set up the sample
Create a file named quickstart.php in your working directory and copy in the following code:
작업 디렉토리에 quickstart.php라는 파일을 만들고 다음 코드를 복사하십시오.

-- quickstart.php --
<?php
require __DIR__ . '/vendor/autoload.php';

/**
 * Returns an authorized API client.
 * @return Google_Client the authorized client object
 */
function getClient()
{
    $client = new Google_Client();
    $client->setApplicationName('Google Calendar API PHP Quickstart');
    $client->setScopes(Google_Service_Calendar::CALENDAR_READONLY);
    $client->setAuthConfig('client_secret.json');
    $client->setAccessType('offline');

    // Load previously authorized credentials from a file.
    $credentialsPath = expandHomeDirectory('credentials.json');
    if (file_exists($credentialsPath)) {
        $accessToken = json_decode(file_get_contents($credentialsPath), true);
    } else {
        // Request authorization from the user.
        $authUrl = $client->createAuthUrl();
        printf("Open the following link in your browser:\n%s\n", $authUrl);
        print 'Enter verification code: ';
        $authCode = trim(fgets(STDIN));

        // Exchange authorization code for an access token.
        $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);

        // Store the credentials to disk.
        if (!file_exists(dirname($credentialsPath))) {
            mkdir(dirname($credentialsPath), 0700, true);
        }
        file_put_contents($credentialsPath, json_encode($accessToken));
        printf("Credentials saved to %s\n", $credentialsPath);
    }
    $client->setAccessToken($accessToken);

    // Refresh the token if it's expired.
    if ($client->isAccessTokenExpired()) {
        $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
        file_put_contents($credentialsPath, json_encode($client->getAccessToken()));
    }
    return $client;
}

/**
 * Expands the home directory alias '~' to the full path.
 * @param string $path the path to expand.
 * @return string the expanded path.
 */
function expandHomeDirectory($path)
{
    $homeDirectory = getenv('HOME');
    if (empty($homeDirectory)) {
        $homeDirectory = getenv('HOMEDRIVE') . getenv('HOMEPATH');
    }
    return str_replace('~', realpath($homeDirectory), $path);
}

// Get the API client and construct the service object.
$client = getClient();
$service = new Google_Service_Calendar($client);

// Print the next 10 events on the user's calendar.
$calendarId = 'primary';
$optParams = array(
  'maxResults' => 10,
  'orderBy' => 'startTime',
  'singleEvents' => true,
  'timeMin' => date('c'),
);
$results = $service->events->listEvents($calendarId, $optParams);

if (empty($results->getItems())) {
    print "No upcoming events found.\n";
} else {
    print "Upcoming events:\n";
    foreach ($results->getItems() as $event) {
        $start = $event->start->dateTime;
        if (empty($start)) {
            $start = $event->start->date;
        }
        printf("%s (%s)\n", $event->getSummary(), $start);
    }
}


Step 4: Run the sample
Run the sample using the following command:
다음 명령을 사용하여 샘플을 실행하십시오.

  $ php quickstart.php


The first time you run the sample, it will prompt you to authorize access:
처음 샘플을 실행하면 액세스 권한을 부여하라는 메시지가 나타납니다.

  1. Browse to the provided URL in your web browser.
     웹 브라우저에서 제공된 URL로 이동하십시오.
     If you are not already logged into your Google account, you will be prompted to log in. If you are logged into multiple Google accounts, you will be asked to select one account to use for the authorization.
     Google 계정에 아직 로그인하지 않은 경우 로그인하라는 메시지가 표시됩니다. 여러 Google 계정에 로그인 한 경우 승인에 사용할 계정을 하나 선택하라는 메시지가 표시됩니다.

  2. Click the Accept button.
     수락 버튼을 클릭하십시오.

  3. Copy the code you're given, paste it into the command-line prompt, and press Enter.
     주어진 코드를 복사하여 명령 행 프롬프트에 붙여넣고 Enter를 누르십시오.
